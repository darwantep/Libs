{"version":3,"sources":["../../../../lib/stream/xlsx/worksheet-reader.js"],"names":["require","EventEmitter","parseSax","_","utils","colCache","Dimensions","Row","Column","WorksheetReader","workbook","id","iterator","options","name","_columns","_keys","_dimensions","Error","c","col","l2n","length","n","push","key","value","f","each","parse","events","eventType","emit","emitSheet","emitHyperlinks","hyperlinks","worksheets","sharedStrings","styles","properties","inCols","inRows","inHyperlinks","cols","row","current","worksheetEvents","node","min","parseInt","attributes","max","width","parseFloat","styleId","style","r","ht","height","s","getStyleModel","ref","t","text","v","hyperlink","rId","fromModel","expandRow","address","decodeAddress","cell","getCell","cellValue","formula","result","xmlDecode","index","sharedString","error","isDateFmt","numFmt","excelToDate","model","date1904","undefined","Symbol","asyncIterator","module","exports"],"mappings":"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","sourcesContent":["const {EventEmitter} = require('events');\nconst parseSax = require('../../utils/parse-sax');\n\nconst _ = require('../../utils/under-dash');\nconst utils = require('../../utils/utils');\nconst colCache = require('../../utils/col-cache');\nconst Dimensions = require('../../doc/range');\n\nconst Row = require('../../doc/row');\nconst Column = require('../../doc/column');\n\nclass WorksheetReader extends EventEmitter {\n  constructor({workbook, id, iterator, options}) {\n    super();\n\n    this.workbook = workbook;\n    this.id = id;\n    this.iterator = iterator;\n    this.options = options || {};\n\n    // and a name\n    this.name = `Sheet${this.id}`;\n\n    // column definitions\n    this._columns = null;\n    this._keys = {};\n\n    // keep a record of dimensions\n    this._dimensions = new Dimensions();\n  }\n\n  // destroy - not a valid operation for a streaming writer\n  // even though some streamers might be able to, it's a bad idea.\n  destroy() {\n    throw new Error('Invalid Operation: destroy');\n  }\n\n  // return the current dimensions of the writer\n  get dimensions() {\n    return this._dimensions;\n  }\n\n  // =========================================================================\n  // Columns\n\n  // get the current columns array.\n  get columns() {\n    return this._columns;\n  }\n\n  // get a single column by col number. If it doesn't exist, it and any gaps before it\n  // are created.\n  getColumn(c) {\n    if (typeof c === 'string') {\n      // if it matches a key'd column, return that\n      const col = this._keys[c];\n      if (col) {\n        return col;\n      }\n\n      // otherise, assume letter\n      c = colCache.l2n(c);\n    }\n    if (!this._columns) {\n      this._columns = [];\n    }\n    if (c > this._columns.length) {\n      let n = this._columns.length + 1;\n      while (n <= c) {\n        this._columns.push(new Column(this, n++));\n      }\n    }\n    return this._columns[c - 1];\n  }\n\n  getColumnKey(key) {\n    return this._keys[key];\n  }\n\n  setColumnKey(key, value) {\n    this._keys[key] = value;\n  }\n\n  deleteColumnKey(key) {\n    delete this._keys[key];\n  }\n\n  eachColumnKey(f) {\n    _.each(this._keys, f);\n  }\n\n  async read() {\n    try {\n      for await (const events of this.parse()) {\n        for (const {eventType, value} of events) {\n          this.emit(eventType, value);\n        }\n      }\n      this.emit('finished');\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const events of this.parse()) {\n      for (const {eventType, value} of events) {\n        if (eventType === 'row') {\n          yield value;\n        }\n      }\n    }\n  }\n\n  async *parse() {\n    const {iterator, options} = this;\n    let emitSheet = false;\n    let emitHyperlinks = false;\n    let hyperlinks = null;\n    switch (options.worksheets) {\n      case 'emit':\n        emitSheet = true;\n        break;\n      case 'prep':\n        break;\n      default:\n        break;\n    }\n    switch (options.hyperlinks) {\n      case 'emit':\n        emitHyperlinks = true;\n        break;\n      case 'cache':\n        this.hyperlinks = hyperlinks = {};\n        break;\n      default:\n        break;\n    }\n    if (!emitSheet && !emitHyperlinks && !hyperlinks) {\n      return;\n    }\n\n    // references\n    const {sharedStrings, styles, properties} = this.workbook;\n\n    // xml position\n    let inCols = false;\n    let inRows = false;\n    let inHyperlinks = false;\n\n    // parse state\n    let cols = null;\n    let row = null;\n    let c = null;\n    let current = null;\n    for await (const events of parseSax(iterator)) {\n      const worksheetEvents = [];\n      for (const {eventType, value} of events) {\n        if (eventType === 'opentag') {\n          const node = value;\n          if (emitSheet) {\n            switch (node.name) {\n              case 'cols':\n                inCols = true;\n                cols = [];\n                break;\n              case 'sheetData':\n                inRows = true;\n                break;\n\n              case 'col':\n                if (inCols) {\n                  cols.push({\n                    min: parseInt(node.attributes.min, 10),\n                    max: parseInt(node.attributes.max, 10),\n                    width: parseFloat(node.attributes.width),\n                    styleId: parseInt(node.attributes.style || '0', 10),\n                  });\n                }\n                break;\n\n              case 'row':\n                if (inRows) {\n                  const r = parseInt(node.attributes.r, 10);\n                  row = new Row(this, r);\n                  if (node.attributes.ht) {\n                    row.height = parseFloat(node.attributes.ht);\n                  }\n                  if (node.attributes.s) {\n                    const styleId = parseInt(node.attributes.s, 10);\n                    const style = styles.getStyleModel(styleId);\n                    if (style) {\n                      row.style = style;\n                    }\n                  }\n                }\n                break;\n              case 'c':\n                if (row) {\n                  c = {\n                    ref: node.attributes.r,\n                    s: parseInt(node.attributes.s, 10),\n                    t: node.attributes.t,\n                  };\n                }\n                break;\n              case 'f':\n                if (c) {\n                  current = c.f = {text: ''};\n                }\n                break;\n              case 'v':\n                if (c) {\n                  current = c.v = {text: ''};\n                }\n                break;\n              case 'is':\n              case 't':\n                if (c) {\n                  current = c.v = {text: ''};\n                }\n                break;\n              case 'mergeCell':\n                break;\n              default:\n                break;\n            }\n          }\n\n          // =================================================================\n          //\n          if (emitHyperlinks || hyperlinks) {\n            switch (node.name) {\n              case 'hyperlinks':\n                inHyperlinks = true;\n                break;\n              case 'hyperlink':\n                if (inHyperlinks) {\n                  const hyperlink = {\n                    ref: node.attributes.ref,\n                    rId: node.attributes['r:id'],\n                  };\n                  if (emitHyperlinks) {\n                    worksheetEvents.push({eventType: 'hyperlink', value: hyperlink});\n                  } else {\n                    hyperlinks[hyperlink.ref] = hyperlink;\n                  }\n                }\n                break;\n              default:\n                break;\n            }\n          }\n        } else if (eventType === 'text') {\n          // only text data is for sheet values\n          if (emitSheet) {\n            if (current) {\n              current.text += value;\n            }\n          }\n        } else if (eventType === 'closetag') {\n          const node = value;\n          if (emitSheet) {\n            switch (node.name) {\n              case 'cols':\n                inCols = false;\n                this._columns = Column.fromModel(cols);\n                break;\n              case 'sheetData':\n                inRows = false;\n                break;\n\n              case 'row':\n                this._dimensions.expandRow(row);\n                worksheetEvents.push({eventType: 'row', value: row});\n                row = null;\n                break;\n\n              case 'c':\n                if (row && c) {\n                  const address = colCache.decodeAddress(c.ref);\n                  const cell = row.getCell(address.col);\n                  if (c.s) {\n                    const style = styles.getStyleModel(c.s);\n                    if (style) {\n                      cell.style = style;\n                    }\n                  }\n\n                  if (c.f) {\n                    const cellValue = {\n                      formula: c.f.text,\n                    };\n                    if (c.v) {\n                      if (c.t === 'str') {\n                        cellValue.result = utils.xmlDecode(c.v.text);\n                      } else {\n                        cellValue.result = parseFloat(c.v.text);\n                      }\n                    }\n                    cell.value = cellValue;\n                  } else if (c.v) {\n                    switch (c.t) {\n                      case 's': {\n                        const index = parseInt(c.v.text, 10);\n                        if (sharedStrings) {\n                          cell.value = sharedStrings[index];\n                        } else {\n                          cell.value = {\n                            sharedString: index,\n                          };\n                        }\n                        break;\n                      }\n\n                      case 'inlineStr':\n                      case 'str':\n                        cell.value = utils.xmlDecode(c.v.text);\n                        break;\n\n                      case 'e':\n                        cell.value = {error: c.v.text};\n                        break;\n\n                      case 'b':\n                        cell.value = parseInt(c.v.text, 10) !== 0;\n                        break;\n\n                      default:\n                        if (utils.isDateFmt(cell.numFmt)) {\n                          cell.value = utils.excelToDate(\n                            parseFloat(c.v.text),\n                            properties.model && properties.model.date1904\n                          );\n                        } else {\n                          cell.value = parseFloat(c.v.text);\n                        }\n                        break;\n                    }\n                  }\n                  if (hyperlinks) {\n                    const hyperlink = hyperlinks[c.ref];\n                    if (hyperlink) {\n                      cell.text = cell.value;\n                      cell.value = undefined;\n                      cell.hyperlink = hyperlink;\n                    }\n                  }\n                  c = null;\n                }\n                break;\n              default:\n                break;\n            }\n          }\n          if (emitHyperlinks || hyperlinks) {\n            switch (node.name) {\n              case 'hyperlinks':\n                inHyperlinks = false;\n                break;\n              default:\n                break;\n            }\n          }\n        }\n      }\n      if (worksheetEvents.length > 0) {\n        yield worksheetEvents;\n      }\n    }\n  }\n}\n\nmodule.exports = WorksheetReader;\n"],"file":"worksheet-reader.js"}