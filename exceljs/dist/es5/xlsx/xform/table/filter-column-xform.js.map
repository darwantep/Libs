{"version":3,"sources":["../../../../../lib/xlsx/xform/table/filter-column-xform.js"],"names":["BaseXform","require","ListXform","CustomFilterXform","FilterXform","FilterColumnXform","map","customFilters","tag","count","empty","childXform","filters","model","options","colId","index","toString","xmlStream","openNode","hiddenButton","filterButton","render","closeNode","leafNode","node","parser","parseOpen","attributes","name","Error","JSON","stringify","parseClose","undefined","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,gBAAD,CAA3B;;IAEMI,iB;;;;;AACJ,+BAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,GAAL,GAAW;AACTC,MAAAA,aAAa,EAAE,IAAIL,SAAJ,CAAc;AAC3BM,QAAAA,GAAG,EAAE,eADsB;AAE3BC,QAAAA,KAAK,EAAE,KAFoB;AAG3BC,QAAAA,KAAK,EAAE,IAHoB;AAI3BC,QAAAA,UAAU,EAAE,IAAIR,iBAAJ;AAJe,OAAd,CADN;AAOTS,MAAAA,OAAO,EAAE,IAAIV,SAAJ,CAAc;AACrBM,QAAAA,GAAG,EAAE,SADgB;AAErBC,QAAAA,KAAK,EAAE,KAFc;AAGrBC,QAAAA,KAAK,EAAE,IAHc;AAIrBC,QAAAA,UAAU,EAAE,IAAIP,WAAJ;AAJS,OAAd;AAPA,KAAX;AAHY;AAiBb;;;;SAED,eAAU;AACR,aAAO,cAAP;AACD;;;WAED,iBAAQS,KAAR,EAAeC,OAAf,EAAwB;AACtBD,MAAAA,KAAK,CAACE,KAAN,GAAcD,OAAO,CAACE,KAAR,CAAcC,QAAd,EAAd;AACD;;;WAED,gBAAOC,SAAP,EAAkBL,KAAlB,EAAyB;AACvB,UAAIA,KAAK,CAACN,aAAV,EAAyB;AACvBW,QAAAA,SAAS,CAACC,QAAV,CAAmB,KAAKX,GAAxB,EAA6B;AAC3BO,UAAAA,KAAK,EAAEF,KAAK,CAACE,KADc;AAE3BK,UAAAA,YAAY,EAAEP,KAAK,CAACQ,YAAN,GAAqB,GAArB,GAA2B;AAFd,SAA7B;AAKA,aAAKf,GAAL,CAASC,aAAT,CAAuBe,MAAvB,CAA8BJ,SAA9B,EAAyCL,KAAK,CAACN,aAA/C;AAEAW,QAAAA,SAAS,CAACK,SAAV;AACA,eAAO,IAAP;AACD;;AACDL,MAAAA,SAAS,CAACM,QAAV,CAAmB,KAAKhB,GAAxB,EAA6B;AAC3BO,QAAAA,KAAK,EAAEF,KAAK,CAACE,KADc;AAE3BK,QAAAA,YAAY,EAAEP,KAAK,CAACQ,YAAN,GAAqB,GAArB,GAA2B;AAFd,OAA7B;AAIA,aAAO,IAAP;AACD;;;WAED,mBAAUI,IAAV,EAAgB;AACd,UAAI,KAAKC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,eAAO,IAAP;AACD;;AACD,UAAOG,UAAP,GAAqBH,IAArB,CAAOG,UAAP;;AACA,cAAQH,IAAI,CAACI,IAAb;AACE,aAAK,KAAKrB,GAAV;AACE,eAAKK,KAAL,GAAa;AACXQ,YAAAA,YAAY,EAAEO,UAAU,CAACR,YAAX,KAA4B;AAD/B,WAAb;AAGA,iBAAO,IAAP;;AACF;AACE,eAAKM,MAAL,GAAc,KAAKpB,GAAL,CAASmB,IAAI,CAACI,IAAd,CAAd;;AACA,cAAI,KAAKH,MAAT,EAAiB;AACf,iBAAKC,SAAL,CAAeF,IAAf;AACA,mBAAO,IAAP;AACD;;AACD,gBAAM,IAAIK,KAAJ,6CAA+CC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAA/C,EAAN;AAZJ;AAcD;;;WAED,qBAAY,CAAE;;;WAEd,oBAAWI,IAAX,EAAiB;AACf,UAAI,KAAKH,MAAT,EAAiB;AACf,YAAI,CAAC,KAAKA,MAAL,CAAYO,UAAZ,CAAuBJ,IAAvB,CAAL,EAAmC;AACjC,eAAKH,MAAL,GAAcQ,SAAd;AACD;;AACD,eAAO,IAAP;AACD;;AACD,cAAQL,IAAR;AACE,aAAK,KAAKrB,GAAV;AACE,eAAKK,KAAL,CAAWN,aAAX,GAA2B,KAAKD,GAAL,CAASC,aAAT,CAAuBM,KAAlD;AACA,iBAAO,KAAP;;AACF;AACE;AACA,iBAAO,IAAP;AANJ;AAQD;;;;EAtF6Bb,S;;AAyFhCmC,MAAM,CAACC,OAAP,GAAiB/B,iBAAjB","sourcesContent":["const BaseXform = require('../base-xform');\nconst ListXform = require('../list-xform');\n\nconst CustomFilterXform = require('./custom-filter-xform');\nconst FilterXform = require('./filter-xform');\n\nclass FilterColumnXform extends BaseXform {\n  constructor() {\n    super();\n\n    this.map = {\n      customFilters: new ListXform({\n        tag: 'customFilters',\n        count: false,\n        empty: true,\n        childXform: new CustomFilterXform(),\n      }),\n      filters: new ListXform({\n        tag: 'filters',\n        count: false,\n        empty: true,\n        childXform: new FilterXform(),\n      }),\n    };\n  }\n\n  get tag() {\n    return 'filterColumn';\n  }\n\n  prepare(model, options) {\n    model.colId = options.index.toString();\n  }\n\n  render(xmlStream, model) {\n    if (model.customFilters) {\n      xmlStream.openNode(this.tag, {\n        colId: model.colId,\n        hiddenButton: model.filterButton ? '0' : '1',\n      });\n\n      this.map.customFilters.render(xmlStream, model.customFilters);\n\n      xmlStream.closeNode();\n      return true;\n    }\n    xmlStream.leafNode(this.tag, {\n      colId: model.colId,\n      hiddenButton: model.filterButton ? '0' : '1',\n    });\n    return true;\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n    const {attributes} = node;\n    switch (node.name) {\n      case this.tag:\n        this.model = {\n          filterButton: attributes.hiddenButton === '0',\n        };\n        return true;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parseOpen(node);\n          return true;\n        }\n        throw new Error(`Unexpected xml node in parseOpen: ${JSON.stringify(node)}`);\n    }\n  }\n\n  parseText() {}\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n    switch (name) {\n      case this.tag:\n        this.model.customFilters = this.map.customFilters.model;\n        return false;\n      default:\n        // could be some unrecognised tags\n        return true;\n    }\n  }\n}\n\nmodule.exports = FilterColumnXform;\n"],"file":"filter-column-xform.js"}