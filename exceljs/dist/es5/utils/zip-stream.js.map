{"version":3,"sources":["../../../lib/utils/zip-stream.js"],"names":["events","require","JSZip","StreamBuf","stringToBuffer","ZipWriter","options","Object","assign","type","compression","zip","stream","data","hasOwnProperty","base64","file","name","process","browser","generateAsync","content","end","emit","size","read","encoding","setEncoding","pause","resume","isPaused","destination","pipe","unpipe","chunk","unshift","wrap","EventEmitter","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AACA,eAAyBA,OAAO,CAAC,yBAAD,CAAhC;AAAA,IAAOG,cAAP,YAAOA,cAAP,C,CAEA;AACA;AACA;;;IACMC,S;;;;;AACJ,qBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB;AACA,UAAKA,OAAL,GAAeC,MAAM,CAACC,MAAP,CACb;AACEC,MAAAA,IAAI,EAAE,YADR;AAEEC,MAAAA,WAAW,EAAE;AAFf,KADa,EAKbJ,OALa,CAAf;AAQA,UAAKK,GAAL,GAAW,IAAIT,KAAJ,EAAX;AACA,UAAKU,MAAL,GAAc,IAAIT,SAAJ,EAAd;AAXmB;AAYpB;;;;WAED,gBAAOU,IAAP,EAAaP,OAAb,EAAsB;AACpB,UAAIA,OAAO,CAACQ,cAAR,CAAuB,QAAvB,KAAoCR,OAAO,CAACS,MAAhD,EAAwD;AACtD,aAAKJ,GAAL,CAASK,IAAT,CAAcV,OAAO,CAACW,IAAtB,EAA4BJ,IAA5B,EAAkC;AAACE,UAAAA,MAAM,EAAE;AAAT,SAAlC;AACD,OAFD,MAEO;AACL;AACA,YAAIG,OAAO,CAACC,OAAR,IAAmB,OAAON,IAAP,KAAgB,QAAvC,EAAiD;AAC/C;AACAA,UAAAA,IAAI,GAAGT,cAAc,CAACS,IAAD,CAArB;AACD;;AACD,aAAKF,GAAL,CAASK,IAAT,CAAcV,OAAO,CAACW,IAAtB,EAA4BJ,IAA5B;AACD;AACF;;;;8EAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACwB,KAAKF,GAAL,CAASS,aAAT,CAAuB,KAAKd,OAA5B,CADxB;;AAAA;AACQe,gBAAAA,OADR;AAEE,qBAAKT,MAAL,CAAYU,GAAZ,CAAgBD,OAAhB;AACA,qBAAKE,IAAL,CAAU,QAAV;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;QAMA;AACA;;;;WACA,cAAKC,IAAL,EAAW;AACT,aAAO,KAAKZ,MAAL,CAAYa,IAAZ,CAAiBD,IAAjB,CAAP;AACD;;;WAED,qBAAYE,QAAZ,EAAsB;AACpB,aAAO,KAAKd,MAAL,CAAYe,WAAZ,CAAwBD,QAAxB,CAAP;AACD;;;WAED,iBAAQ;AACN,aAAO,KAAKd,MAAL,CAAYgB,KAAZ,EAAP;AACD;;;WAED,kBAAS;AACP,aAAO,KAAKhB,MAAL,CAAYiB,MAAZ,EAAP;AACD;;;WAED,oBAAW;AACT,aAAO,KAAKjB,MAAL,CAAYkB,QAAZ,EAAP;AACD;;;WAED,cAAKC,WAAL,EAAkBzB,OAAlB,EAA2B;AACzB,aAAO,KAAKM,MAAL,CAAYoB,IAAZ,CAAiBD,WAAjB,EAA8BzB,OAA9B,CAAP;AACD;;;WAED,gBAAOyB,WAAP,EAAoB;AAClB,aAAO,KAAKnB,MAAL,CAAYqB,MAAZ,CAAmBF,WAAnB,CAAP;AACD;;;WAED,iBAAQG,KAAR,EAAe;AACb,aAAO,KAAKtB,MAAL,CAAYuB,OAAZ,CAAoBD,KAApB,CAAP;AACD;;;WAED,cAAKtB,MAAL,EAAa;AACX,aAAO,KAAKA,MAAL,CAAYwB,IAAZ,CAAiBxB,MAAjB,CAAP;AACD;;;;EAtEqBZ,MAAM,CAACqC,Y,GAyE/B;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACflC,EAAAA,SAAS,EAATA;AADe,CAAjB","sourcesContent":["const events = require('events');\nconst JSZip = require('jszip');\n\nconst StreamBuf = require('./stream-buf');\nconst {stringToBuffer} = require('./browser-buffer-encode');\n\n// =============================================================================\n// The ZipWriter class\n// Packs streamed data into an output zip stream\nclass ZipWriter extends events.EventEmitter {\n  constructor(options) {\n    super();\n    this.options = Object.assign(\n      {\n        type: 'nodebuffer',\n        compression: 'DEFLATE',\n      },\n      options\n    );\n\n    this.zip = new JSZip();\n    this.stream = new StreamBuf();\n  }\n\n  append(data, options) {\n    if (options.hasOwnProperty('base64') && options.base64) {\n      this.zip.file(options.name, data, {base64: true});\n    } else {\n      // https://www.npmjs.com/package/process\n      if (process.browser && typeof data === 'string') {\n        // use TextEncoder in browser\n        data = stringToBuffer(data);\n      }\n      this.zip.file(options.name, data);\n    }\n  }\n\n  async finalize() {\n    const content = await this.zip.generateAsync(this.options);\n    this.stream.end(content);\n    this.emit('finish');\n  }\n\n  // ==========================================================================\n  // Stream.Readable interface\n  read(size) {\n    return this.stream.read(size);\n  }\n\n  setEncoding(encoding) {\n    return this.stream.setEncoding(encoding);\n  }\n\n  pause() {\n    return this.stream.pause();\n  }\n\n  resume() {\n    return this.stream.resume();\n  }\n\n  isPaused() {\n    return this.stream.isPaused();\n  }\n\n  pipe(destination, options) {\n    return this.stream.pipe(destination, options);\n  }\n\n  unpipe(destination) {\n    return this.stream.unpipe(destination);\n  }\n\n  unshift(chunk) {\n    return this.stream.unshift(chunk);\n  }\n\n  wrap(stream) {\n    return this.stream.wrap(stream);\n  }\n}\n\n// =============================================================================\n\nmodule.exports = {\n  ZipWriter,\n};\n"],"file":"zip-stream.js"}